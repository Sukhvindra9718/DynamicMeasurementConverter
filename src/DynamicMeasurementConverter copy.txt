// import { Component, createElement, Fragment, useRef, useEffect, useState } from "react";

// import { HelloWorldSample } from "./components/HelloWorldSample";
// import "./ui/DynamicMeasurementConverter.css";


// function DynamicMeasurementConverter(props) {
//     const [value, setValue] = useState(0);
//     const [conversion, setConversion] = useState(0);
//     const [result, setResult] = useState("");
//     const myContainerRef = useRef(null);
//     const myResultRef = useRef(null);


//     const onValueInputChange = (e) => {
//         if (e) {
//             setValue(e.target.value);
//         }
//     };
//     const onConversionInputChange = (e) => {
//         if (e) {
//             setConversion(e.target.value);
//         }
//     };
//     const onResultInputChange = (e) => {
//         if (e) {
//             setResult(e.target.value);
//         }
//     }
//     const res = conversion == 0 ? 0 : value / conversion;


//     useEffect(() => {
//         let eventListener;
//         let eventListener2;
//         if (myContainerRef.current) {
//             const inputElements = myContainerRef.current.querySelectorAll("input");
//             if (inputElements.length) {
//                 eventListener = inputElements[0];
//                 eventListener2 = inputElements[1];
//                 eventListener.addEventListener("input", onValueInputChange);
//                 eventListener2.addEventListener("input", onConversionInputChange);
//             }
//         }
//         return () => {
//             eventListener.removeEventListener("input", onValueInputChange);
//             eventListener2.removeEventListener("input", onConversionInputChange);
//         };
//     }, [myContainerRef]);

//     console.log("value", value);
//     console.log("conversion", conversion);
//     console.log("result", result);
//     return (
//         <Fragment>
//             {/* <HelloWorldSample sampleText={props.sampleText} /> */}

//             <div ref={myContainerRef}>{props.content}</div>
//             <div className="textbox">
//                 <p>Convert value</p>
//                 <input type="number" value={result} ref={myResultRef} onChange={onResultInputChange} placeholder={res}/>
//             </div>
//         </Fragment>
//     )
// }


// export default DynamicMeasurementConverter

import { createElement, Fragment, useRef, useEffect, useState } from "react";
import "./ui/DynamicMeasurementConverter.css";

export function DynamicMeasurementConverter(props) {
    const [placeholder, setPlaceholder] = useState("");
    const a = props.inputValue.displayValue;
    const [value, setValue] = useState(a);
    const b = props.inputConversionRate.displayValue;
    const [conversion, setConversion] = useState(b);
    const [dec, setDec] = useState("");
    const myContainerRef = useRef(null);
    // console.log("props", props.inputValue);
    // console.log("value", value);
    // console.log("conversion", conversion);

    // const res = conversion == 0.00 ? 0.0 : value / conversion;
    const handleFocus = (event) => event.target.select();
    const handleChange = e => {
        console.log("onchange")
        setDec(e.target.value);
        setValue(e.target.value*conversion);
        console.log("dec", dec);
    //      props.inputValue.setValue(e.target.value*conversion);
    //     if (props.onChange && props.onChange.canExecute) {
    //         props.onChange.execute();
    // }

    };

    useEffect(() => {
        setConversion(props.inputConversionRate.displayValue);
        setValue(props.inputValue.displayValue);
        setDec(props.inputValue.displayValue/props.inputConversionRate.displayValue);
    }, [props.inputConversionRate, props.inputValue]);
    // useEffect(() => {
    //     setDec(props.inputValue.value);
    // }, [props.inputValue]);
    // useEffect(() => {
    //     setPlaceholder(props.placeholder);
    // }, [props.placeholder]);
   
    return (
        <Fragment>
            <div ref={myContainerRef}>{props.content}</div>
            <div className="textbox">
                <p>Convert value</p>
                <input
                    type="number"
                    pattern="^\d+(?:\.\d{1,2})?$"
                    value={dec}
                    // pattern={props.regEx ? props.regEx : ""}
                    max={props.maxLength}
                    // placeholder={res}
                    onChange={(e) => handleChange(e)}
                    onFocus={e => {
                        handleFocus(e);
                    }}

                    onKeyDown={(evt) => ["e", "E", "+", "-", "ArrowDown", "ArrowUp"].includes(evt.key) && evt.preventDefault()}
                />
            </div>
        </Fragment>

    );
}